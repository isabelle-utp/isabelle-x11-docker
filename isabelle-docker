#!/bin/bash
set -e # exit immediately upon errors

# Robust way to obtain the directory in which this script resides.
SCRIPT_DIR=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")

# Location and version tag of the image on dockerhub.
# IMAGE="galoisinc/isabelle-x11:1.0"
IMAGE="docker.io/galoisinc/isabelle-x11:1.0"

# Set hostname of the container to isabelle-x11.
HOSTNAME="--hostname isabelle-x11"

# The namespace mapping ensures that the 'work' user in the container
# is mapped to the local user running this script. Futher, container
# UIDs/GIDs 0..999 are mapped to the intermediate UIDs 1..1000. See:
#  https://stackoverflow.com/questions/70770437/mapping-of-user-ids
# for a more detailed explanation on UID mapping in rootless containers.
NAMESPACE="--uidmap 1000:0:1 --uidmap 0:1:1000
           --gidmap 1000:0:1 --gidmap 0:1:1000"

# The following options are crucial to permit the container to create
# a X11 connection to the host. For a more detailed explanation, see:
#  https://major.io/2021/10/17/run-xorg-applications-with-podman/
X11_OPTS="-e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --security-opt label=type:container_runtime_t"

# Maps the local work directory into /home/work inside the container.
HOME_EXPORT="$SCRIPT_DIR/work:/home/work"

# Ensure that this script is not executed in the background, as this
# seems to cause issues with running the container.
if [[ ! $(ps -o stat= -p $$) =~ "+" ]]; then
  echo -e "\n-> Script must be run in the foreground. Do not use &."
  echo -n "Press [RETURN] ... "
  exit 1
fi

# The initial start if the container can be a little slow due to the
# UID/GUI namespace mapping. (On my laptop, it takes about 30 seconds.)
echo "Starting isabelle-x11 container (this may take several minutes) ..."

# Execute the isabelle-x11 docker image.
docker run -it --rm $HOSTNAME $NAMESPACE -v "$HOME_EXPORT" $X11_OPTS $IMAGE isabelle $*

# Let the user know that his work is not lost ...
echo "Note that your work persists in the local 'work' subfolder."
